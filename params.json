{"google":"UA-23976290-2","body":"# Pushmeup\r\n\r\n### a gem for various push notification services.\r\n\r\n## Goals\r\n\r\nPushmeup is an attempt to create an push notifications center that could send push to devices like:\r\n\r\n- Android\r\n- iOS\r\n- Mac OS X\r\n- Windows Phone\r\n- And many others\r\n\r\nCurrently we have only support for ``iOS`` and ``Android`` but we are planning code for more plataforms.\r\n\r\n## Installation\r\n\r\n    $ gem install pushmeup\r\n    \r\nor add to your ``Gemfile``\r\n\r\n    gem 'pushmeup'\r\n    \r\nand install it with\r\n\r\n    $ bundle install\r\n\r\n## APNS (Apple iOS)\r\n\r\n### Configure\r\n\r\n1. In Keychain access export your certificate and your private key as a ``p12``.\r\n\r\n  ![Keychain Access](https://raw.github.com/NicosKaralis/pushmeup/master/Keychain Access.jpg)\r\n\r\n2. Run the following command to convert the ``p12`` to a ``pem`` file\r\n\r\n        $ openssl pkcs12 -in cert.p12 -out cert.pem -nodes -clcerts\r\n\r\n3. After you have created your ``pem`` file. Set what host, port, certificate file location on the APNS class. You just need to set this once:\r\n\r\n        APNS.host = 'gateway.push.apple.com' \r\n        # gateway.sandbox.push.apple.com is default\r\n        \r\n        APNS.port = 2195 \r\n        # this is also the default. Shouldn't ever have to set this, but just in case Apple goes crazy, you can.\r\n\r\n        APNS.pem  = '/path/to/pem/file'\r\n        # this is the file you just created\r\n\r\n        APNS.pass = ''\r\n        # Just in case your pem need a password\r\n\r\n### Usage\r\n\r\n#### Sending a single notification:\r\n\r\n        device_token = '123abc456def'\r\n        APNS.send_notification(device_token, 'Hello iPhone!' )\r\n        APNS.send_notification(device_token, :alert => 'Hello iPhone!', :badge => 1, :sound => 'default')\r\n\r\n#### Sending multiple notifications\r\n\r\n        device_token = '123abc456def'\r\n        n1 = APNS::Notification.new(device_token, 'Hello iPhone!' )\r\n        n2 = APNS::Notification.new(device_token, :alert => 'Hello iPhone!', :badge => 1, :sound => 'default')\r\n        APNS.send_notifications([n1, n2])\r\n\r\n#### Sending more information along\r\n\r\n        APNS.send_notification(device_token, :alert => 'Hello iPhone!', :badge => 1, :sound => 'default', \r\n                                            :other => {:sent => 'with apns gem', :custom_param => \"value\"})\r\n                                            \r\nthis will result in a payload like this:\r\n\r\n        {\"aps\":{\"alert\":\"Hello iPhone!\",\"badge\":1,\"sound\":\"default\"},\"sent\":\"with apns gem\", \"custom_param\":\"value\"}\r\n\r\n### Getting your iOS device token\r\n\r\n    - (void)applicationDidFinishLaunching:(UIApplication *)application {\r\n        // Register with apple that this app will use push notification\r\n        ...\r\n        \r\n        [[UIApplication sharedApplication] registerForRemoteNotificationTypes:(UIRemoteNotificationTypeAlert | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeBadge)];\r\n        \r\n        ...\r\n        \r\n    }\r\n    \r\n    - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\r\n        // Show the device token obtained from apple to the log\r\n        NSLog(\"deviceToken: %\", deviceToken);\r\n    }\r\n\r\n## GCM (Google Cloud Messaging)\r\n\r\n### Configure\r\n\r\n\t\tGCM.host = 'https://android.googleapis.com/gcm/send'\r\n\t\t# https://android.googleapis.com/gcm/send is default\r\n\r\n\t\tGCM.format = :json\r\n\t\t# :json is default and only available at the moment\r\n\r\n\t\tGCM.key = \"123abc456def\"\r\n\t\t# this is the apiKey obtained from here https://code.google.com/apis/console/\r\n\t\t\r\n### Usage\r\n\r\n#### Sending a single notification:\r\n\r\n\t\tdestination = [\"device1\", \"device2\", \"device3\"]\r\n\t\t# can be an string or an array of strings containing the regIds of the devices you want to send\r\n\r\n\t\tdata = {:key => \"value\", :key2 => [\"array\", \"value\"]}\r\n\t\t# must be an hash with all values you want inside you notification\r\n\r\n\t\tGCM.send_notification( destination )\r\n\t\t# Empty notification\r\n\r\n\t\tGCM.send_notification( destination, data )\r\n\t\t# Notification with custom information\r\n\r\n\t\tGCM.send_notification( destination, data, :collapse_key => \"placar_score_global\", :time_to_live => 3600, :delay_while_idle => false )\r\n\t\t# Notification with custom information and parameters\r\n\r\nfor more information on parameters check documentation: [GCM | Android Developers](http://developer.android.com/guide/google/gcm/gcm.html#request)\r\n\r\n#### Sending multiple notifications:\r\n\r\n\t\tdestination1 = \"device1\"\r\n\t\tdestination2 = [\"device2\"]\r\n\t\tdestination3 = [\"device1\", \"device2\", \"device3\"]\r\n\t\t# can be an string or an array of strings containing the regIds of the devices you want to send\r\n\r\n\t\tdata1 = {:key => \"value\", :key2 => [\"array\", \"value\"]}\r\n\t\t# must be an hash with all values you want inside you notification\r\n\t\t\r\n\t\toptions1 = {:collapse_key => \"placar_score_global\", :time_to_live => 3600, :delay_while_idle => false}\r\n\t\t# options for the notification\r\n\t\t\r\n\t\tn1 = GCM::Notification.new(destination1, data1, options1)\r\n\t\tn2 = GCM::Notification.new(destination2, data2)\r\n\t\tn3 = GCM::Notification.new(destination3, data3, options2)\r\n\r\n\t\tGCM.send_notifications( [n1, n2, n3] )\r\n\t\t# In this case, every notification has his own parameters\r\n\t\r\nfor more information on parameters check documentation: [GCM | Android Developers](http://developer.android.com/guide/google/gcm/gcm.html#request)\r\n\r\n#### Getting your Android device token (regId)\r\n\r\nCheck this link [GCM: Getting Started](http://developer.android.com/guide/google/gcm/gs.html)\r\n\r\n## Build Status [![Build Status](https://secure.travis-ci.org/NicosKaralis/pushmeup.png?branch=master)](http://travis-ci.org/NicosKaralis/pushmeup) [![Code Climate](https://codeclimate.com/badge.png)](https://codeclimate.com/github/NicosKaralis/pushmeup)\r\n\r\n## Dependency Status [![Dependency Status](https://gemnasium.com/NicosKaralis/pushmeup.png?travis)](https://gemnasium.com/NicosKaralis/pushmeup)\r\n\r\n## License\r\n\r\nPushmeup is released under the MIT license:\r\n\r\nhttp://www.opensource.org/licenses/MIT\r\n\r\n\r\n### Welcome to GitHub Pages.\r\nThis automatic page generator is the easiest way to create beautiful pages for all of your projects. Author your page content here using GitHub Flavored Markdown, select a template crafted by a designer, and publish. After your page is generated, you can check out the new branch:\r\n\r\n```\r\n$ cd your_repo_root/repo_name\r\n$ git fetch origin\r\n$ git checkout gh-pages\r\n```\r\n\r\nIf you're using the GitHub for Mac, simply sync your repository and you'll see the new branch.\r\n\r\n### Designer Templates\r\nWe've crafted some handsome templates for you to use. Go ahead and continue to layouts to browse through them. You can easily go back to edit your page before publishing. After publishing your page, you can revisit the page generator and switch to another theme. Your Page content will be preserved if it remained markdown format.\r\n\r\n### Rather Drive Stick?\r\nIf you prefer to not use the automatic generator, push a branch named `gh-pages` to your repository to create a page manually. In addition to supporting regular HTML content, GitHub Pages support Jekyll, a simple, blog aware static site generator written by our own Tom Preston-Werner. Jekyll makes it easy to create site-wide headers and footers without having to copy them across every page. It also offers intelligent blog support and other advanced templating features.\r\n\r\n### Authors and Contributors\r\nYou can @mention a GitHub username to generate a link to their profile. The resulting `<a>` element will link to the contributor's GitHub Profile. For example: In 2007, Chris Wanstrath (@defunkt), PJ Hyett (@pjhyett), and Tom Preston-Werner (@mojombo) founded GitHub.\r\n\r\n### Support or Contact\r\nHaving trouble with Pages? Check out the documentation at http://help.github.com/pages or contact support@github.com and weâ€™ll help you sort it out.","tagline":"This gem is a wrapper to send push notifications to devices. Currently it only sends to Android or iOS devices, but more platforms will be added soon. With APNS (Apple Push Notifications Service) you can send push notifications to Apple devices. With GCM (Google Cloud Messaging) you can send push notifications to Android devices.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Pushmeup"}